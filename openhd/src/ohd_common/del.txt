// A UDP Wifibroadcast stream is a directional lossy connection between
// two units that support wifibroadcast, for example the OpenHD air pi and the OpenHD ground pi.
// It is specified by the following values:
struct XUDPWifibroadcastStream{
    // Set this to true if the stream goes from the air pi to the ground pi.
    // Otherwise, the stream goes from the ground pi to the air pi.
    // Depending on this value, the air pi (and ground pi respective) create
    // either a transmitting wifibroadcast instance or a receiving wifibroadcast intance.
    bool fromAirPiToGroundPi;
    // each UDP wifibroadcast stream has a unique radio port. To avoid clashes, all streams in OpenHD
    // (no matter the direction) have to use distinct radio ports.
    uint8_t rf_radio_port;
    // A UDP WB TX instance listens on a specific localhost udp port while
    // a UDP WB RX instance sends the received data to a specific localhost udp port.
    int udp_localhost_input_port;
    int udp_localhost_output_port;
};

// For OpenHD Telemetry
// Note that the ports for the air and ground are just reversed - this way, one can either run
// the telemetry service on the same system in 2 instances and they talk to each other,
// or run it on 2 different systems with wifibroadcast in between.
static constexpr XUDPWifibroadcastStream OHD_TELEMETRY_AIR_TO_GROUND{true,0,16550,16551};
static constexpr XUDPWifibroadcastStream OHD_TELEMETRY_GROUND_TO_AIR{false,1,16551,16550};

// For OpenHD Video
// Note that the udp ports on the air and ground side match each other.
// Since all video transmission is unidirectional, we can get away with this. It makes debugging easier (in my opinion),
// aka for debugging one could theoretically just start QOpenHD on the air pi lol ;).
// TODO: Do we really need more than 2 video stream(s) ?!! I don't think so, there is no bandwidth for more anyways.
// Also, In case someone has more than 2 cameras connected, the best would probably be to have the option to dynamically
// assign camera X to the primary video stream.
static constexpr XUDPWifibroadcastStream OHD_VIDEO_1_PRIMARY{true,10,5620,5620};
static constexpr XUDPWifibroadcastStream OHD_VIDEO_2_SECONDARY{true,11,5621,5621};


// CSI cameras don't have an endpoint,
// Since there are too many specialities as if we could generify them.
// Also, in case of CIS cameras, we don't need the raw stuff, since pretty much every
// CSI camera then has a custom hw-accelerated pipeline that produces H264/H265/MJPEG out.
// However, a UVC camera might have YUV and/or MJPEG out and requires custom encoding.
struct UvcCameraEndpoint {
  std::string device_node;
};

// A raw endpoint is for cameras that support YUV or RGB raw frames.
// Most likely, the stream is then going to do sw encoding on them.
// This way, we can handle thermal cameras for example.
struct RawEndpoint {
  std::string device_node;
  std::string bus;
  std::vector<std::string> supportedRawFormats;
};

// An encoded endpoint is for cameras that support h264,h265 or MJPEG.
// This is mostly for CSI cameras, for which we then later have a HW accelerated method
// Of generating an encoded video stream that doesn't directly talk to the underlying v4l2 device node,
// but rather uses somthing else (raspivid or libcamera, as an example).
// However, some UVC cameras also support directly encoded MJPEG or h264/h265 out. In this case, they get a encoded endpoint,too.
struct EncodedEndpoint {
  // A list of all the video formats this camera can do for generating encoded data.
  // If the list of supported formats is empty, one can assume that the camera can do anything ?
  // TODO: Or should we make it a hard requirement, and what we as develoers have not said is "feasible" for the camera
  // is all it can do ?
  std::vector<VideoFormat> supportedFormats;
};

/**
   * Convert a readable video format string into a type-safe video format.
   * @param input the string, for example as generated above.
   * @return the video format, with the parsed values from above. On failure,
   * behaviour is undefined.
   * Note: For debugging, I use https://regex101.com/
   */
  static VideoFormat fromString(const std::string &input) {
    // We default to values that are most likely going to work, in case parsing
    // fails.
    VideoFormat ret{};
    std::smatch result;
    const std::regex reg{R"(([\w\d\s\-\:\/]*)\|(\d*)x(\d*)\@(\d*))"};
    std::cout << "Parsing:" << input << std::endl;
    if (std::regex_search(input, result, reg)) {
      if (result.size() == 5) {
        ret.videoCodec = string_to_video_codec(result[1]);
        ret.width = atoi(result[2].str().c_str());
        ret.height = atoi(result[3].str().c_str());
        ret.framerate = atoi(result[4].str().c_str());
        std::cout << "Parsed:" << ret.toString() << "\n";
      } else {
        std::cout << "Video format missmatch " << result.size();
        for (int a = 0; a < result.size(); a++) {
          std::cout << " " << a << " " << result[a] << ".";
        }
        std::cout << std::endl;
      }
    } else {
      std::cerr << "Video regex format failed " << input << "\n";
    }
    return ret;
  }


static VideoCodec string_to_video_codec(const std::string &codec) {
  if (OHDUtil::to_uppercase(codec).find(OHDUtil::to_uppercase("h264")) !=
      std::string::npos) {
    return VideoCodec::H264;
  } else if (OHDUtil::to_uppercase(codec).find(OHDUtil::to_uppercase("h265")) !=
             std::string::npos) {
    return VideoCodec::H265;
  } else if (OHDUtil::to_uppercase(codec).find(
                 OHDUtil::to_uppercase("mjpeg")) != std::string::npos) {
    return VideoCodec::MJPEG;
  }
  return VideoCodec::Unknown;
}
static WiFiHotspotType string_to_wifi_hotspot_type(const std::string &hotspot_type) {
  if (OHDUtil::to_uppercase(hotspot_type).find(OHDUtil::to_uppercase("internal2g")) != std::string::npos) {
	return WiFiHotspotType::Internal2GBand;
  } else if (OHDUtil::to_uppercase(hotspot_type).find(OHDUtil::to_uppercase("internal5g")) != std::string::npos) {
	return WiFiHotspotType::Internal5GBand;
  } else if (OHDUtil::to_uppercase(hotspot_type).find(OHDUtil::to_uppercase("internaldualband")) != std::string::npos) {
	return WiFiHotspotType::InternalDualBand;
  } else if (OHDUtil::to_uppercase(hotspot_type).find(OHDUtil::to_uppercase("external")) != std::string::npos) {
	return WiFiHotspotType::External;
  }
  return WiFiHotspotType::None;
}
static WifiUseFor wifi_use_for_from_string(const std::string s){
  if(OHDUtil::to_uppercase(s).find(OHDUtil::to_uppercase("monitor_mode"))!=std::string::npos){
	return WifiUseFor::MonitorMode;
  }else if(OHDUtil::to_uppercase(s).find(OHDUtil::to_uppercase("hotspot"))!=std::string::npos){
	return WifiUseFor::Hotspot;
  }else{
	return WifiUseFor::Unknown;
  }
}

/**
 * The settings are stored in a directory called air_$unit_id or ground_$unit_id.
 * @return the settings directory, created newly if non existent. As an example, it will return a path like
 * this: BASE_PATH/air_8bfff348-c17e-4833-af66-cef83f90c208/
 */
static std::string findOrCreateSettingsDirectory(bool is_air) {
  generateSettingsDirectoryIfNonExists();
  std::stringstream settingsPath;
  settingsPath << BASE_PATH;
  settingsPath << (is_air ? "air_" : "ground_");
  const auto unit_id = getOrCreateUnitId();
  settingsPath << unit_id;
  auto str = settingsPath.str();
  std::cout << "SettingsDirectory:[" << str << "]\n";
  // create the directory if it is non existing
  if (!std::filesystem::exists(str.c_str())) {
	std::filesystem::create_directory(str.c_str());
  }
  assert(std::filesystem::exists(str.c_str()));
  return str;
}
static void create_directory_if_not_existing(const char* directory){
  if(!exists(directory)){
	create_directory(directory);
  }
}

 /**
  * Return the name of the default UART for the different platforms OpenHD is running on.
  * @param platformType the platform we are running on
  * @return the uart name string (linux file)
   */
  static std::string uartForPlatformType(const PlatformType &platformType) {
    // hacky for now, this works on rpi when connecting the USB of my FC
    return "/dev/ttyACM0";

    // we default to using a USB serial adapter on any other platform at the moment, some just need
    // to be checked to see what the port is called, but PC will likely always be USB
    // for testing, the serial shows up as this on my pc:
    /*std::string platformSerialPort = "/dev/ttyUSB0";
    switch (platformType) {
      case PlatformType::RaspberryPi: {
        //platformSerialPort = "/dev/serial0";
        break;
      }
      case PlatformType::Jetson: {
        platformSerialPort = "/dev/ttyTHS1";
        break;
      }
      case PlatformType::PC:{
        platformSerialPort="/dev/ttyACM0";
        break;
      }
      default: {
        std::cout << "Using default UART " << platformSerialPort << "\n";
        break;
      }
    }
    return platformSerialPort;*/
  }

  // Return: A vector with the supported channel numbers
  static std::vector<int> get_supported_channels(const std::string& wifi_interface_name){
    const std::string command="iwlist "+wifi_interface_name+" frequency";
    const auto res_op=OHDUtil::run_command_out(command.c_str());
    if(!res_op.has_value()){
  	std::cerr<<"get_supported_channels for "<<wifi_interface_name<<" failed\n";
  	return {};
    }
    const auto res=res_op;
  }

// Makes it easier to dynamically disable / enable / change an uart endpoint
class SerialEndpointHolder{
 public:
  SerialEndpointHolder() = default;

  void setup(int fc_uart_connection_type,int fc_uart_baudrate){
	assert(openhd::validate_uart_connection_type(fc_uart_connection_type));
	// Disable the currently running uart configuration, if there is any
	std::lock_guard<std::mutex> guard(_serialEndpointMutex);
	if(serialEndpoint!=nullptr) {
	  std::cout<<"Stopping already existing FC UART\n";
	  serialEndpoint->stop();
	  serialEndpoint.reset();
	  serialEndpoint=nullptr;
	}
	if(fc_uart_connection_type==openhd::UART_CONNECTION_TYPE_DISABLE){
	  // No uart enabled, we've already cleaned it up though
	  std::cout<<"FC UART disabled\n";
	  return;
	}else{
	  std::cout<<"FC UART enable - begin\n";
	  SerialEndpoint::HWOptions options{};
	  options.linux_filename=openhd::uart_fd_from_connection_type(fc_uart_connection_type).value();
	  options.baud_rate=fc_uart_baudrate;
	  options.flow_control= false;
	  serialEndpoint=std::make_unique<SerialEndpoint>("SerialEndpointUARTFC",options);
	  serialEndpoint->registerCallback([this](MavlinkMessage &msg) {
		//this->onMessageFC(msg);
	  });
	  std::cout<<"FC UART enable - end\n";
	}
  }

 private:
  std::mutex _serialEndpointMutex;
  std::unique_ptr<SerialEndpoint> serialEndpoint=nullptr;
};

nlohmann::json j = nlohmann::json::parse(f, nullptr, false);
	if (j.is_discarded()) {
	  std::stringstream ss;
	  ss<<"PersistentSettings::read_last_settings json parse error on{"<<file_path<<"}\n";
	  std::cerr<<ss.str();
	  // this means the default settings will be created
	  return std::nullopt;
	}

// OpenHD transmits h264,h265 and mjpeg.
// A (USB) camera might output either an already encoded data stream (e.g. h24,h265,mjpeg) or
// a raw, uncompressed data stream - in which code OpenHD always tries to use a hw encoder first,
// or falls back to SW encoding. That's why we have a extra class here, to handle all the output formats / capabilities
// of a camera.
// Note that it is quite common for a cmaera to support specific resolution@framerate - configs only for specific formats.
// E.g. a USB camera might only do 1080p already encoded, but for raw formats, maxes out at a different resolution.
struct CameraOutputFormat{
  uint32_t v4l2_pixel_format;
  int width;
  int height;
  int framerate;
};

static VideoCodec string_to_video_codec(const std::string &codec) {
  if (OHDUtil::to_uppercase(codec).find(OHDUtil::to_uppercase("h264")) !=
      std::string::npos) {
    return VideoCodec::H264;
  } else if (OHDUtil::to_uppercase(codec).find(OHDUtil::to_uppercase("h265")) !=
             std::string::npos) {
    return VideoCodec::H265;
  } else if (OHDUtil::to_uppercase(codec).find(
                 OHDUtil::to_uppercase("mjpeg")) != std::string::npos) {
    return VideoCodec::MJPEG;
  }
  return VideoCodec::H264;
}
// Simple test for to and from string
/*static void test_video_format_regex() {
  const VideoFormat source{VideoCodecH264, 1280, 720, 30};
  const auto serialized = source.toString();
  const auto from = VideoFormat::fromString(serialized);
  if(!(from == source)){
	throw std::runtime_error("Error VideoFormat from/to\n");
  }
  assert(source == from);
}*/

// can return an empty pointer if stream does not exist
  std::shared_ptr<CameraStream> get_stream_by_index(int idx);
std::shared_ptr<CameraStream> OHDVideo::get_stream_by_index(int idx) {
  if(idx<m_camera_streams.size()){
    return m_camera_streams[idx];
  }
  return nullptr;
}

if(OHDUtil::get_ohd_env_variable_bool("OHD_SKIP_WB_CONFIGURE_CARDS")){
    // This is for debugging / testing new wifi drivers that need a special startup method.
    // Note that here the developer has to configure the cards right before starting openhd, which
    // needs knowledge of wifibroadcast and its quirks.
    m_console->debug("WBStreams::configure_cards() skipping");
    return;
  }

float roi_w=0.5;
float roi_h=0.8;
float roi_x=1.0f-roi_w*0.5f;
float roi_y=1.0f-roi_h*0.5f;
ss<<fmt::format("roi_w={} roi_h={} roi_x={} roi_y={} ",roi_w,roi_h,roi_x,roi_y);

  // R.n only possible on RTL8812AU
  // See https://github.com/OpenHD/rtl8812au/blob/v5.2.20/os_dep/linux/ioctl_cfg80211.c#L3667
  TxPowerLevel wb_tx_power_level=TxPowerLevel::LOW;

enum TxPowerLevel{
  // should be <=25mW, to be legal in all countries,
  LOW=0,
  // arbitrary medium level, rough target: 100mW
  MEDIUM=1,
  // arbitrary high level, rough target: slightly below max of card, to account for cases where max levels might have weird limitations
  HIGH=2,
  // arbitrary max level, rough target: maximum of card, does not take any limitations into account, e.g. might or might not work
  MAX=3
};
NLOHMANN_JSON_SERIALIZE_ENUM( TxPowerLevel, {
   {TxPowerLevel::LOW, "LOW"},
   {TxPowerLevel::MEDIUM, "MEDIUM"},
   {TxPowerLevel::HIGH, "HIGH"},
   {TxPowerLevel::MAX, "MAX"},
});

// requires rtl8812au openhd driver https://github.com/OpenHD/rtl8812au/blob/v5.2.20/os_dep/linux/ioctl_cfg80211.c#L3664
// NOTE: these values are the values that are passed to NL80211_ATTR_WIPHY_TX_POWER_LEVEL
// this param is normally in mBm, but has been reworked to accept those rtl8812au specific tx power index override values
// (under this name they were known already in previous openhd releases, but we now support changing them dynamcially at run time)
static uint32_t tx_power_level_to_rtl8812au_tx_power_index_override(const TxPowerLevel& tx_power_level){
  switch (tx_power_level) {
    case TxPowerLevel::LOW:
      return 19;
      break;
    case MEDIUM:
      return 37;
      break;
    case HIGH:
      return 58;
      break;
    case MAX:
      return 63;
      break;
  }
  openhd::log::get_default()->warn("Unknown tx_power_level");
  return 19;
}

static bool validate_tx_power_level(int value){
  return value>=TxPowerLevel::LOW && value<=TxPowerLevel::MAX;
}
auto res=OHDUtil::run_command_out("iw list");
  openhd::log::get_default()->debug("XX {}",res.value_or("NONE"));

  // TODO: We turn wifi completely off in network manager here, but this should work / not interfere with the monitor mode card(s) since they are
  // not managed by network manager
  /*const auto args=std::vector<std::string>{
      "connection","down",OHD_HOTSPOT_CONNECTION_NAME
  };*/
  /*const auto args=std::vector<std::string>{
      "dev wifi hotspot",
       "con-name",OHD_HOTSPOT_CONNECTION_NAME,
       "ifname",m_wifi_card.device_name,
       "ssid","openhd",
       "password", "\"openhdopenhd\""
  };*/

// The above implementation sometimes doesn't work
// Execute a shell command and return its output as a string
/*struct RunShellCommandResult{
  int status;
  std::string status_text;
};
static std::string run_command_out2(const char* command,const bool debug=false){
  const std::string output_filename="/tmp/command_output.txt";
  OHDFilesystemUtil::remove_if_existing(output_filename);
  const std::string command_outputting_to_tmp_file=std::string(command)+" 2>&1
"+output_filename; if(debug){
    openhd::log::get_default()->debug("run_command_out2 begin
[{}]",command_outputting_to_tmp_file);
  }
  const int status = std::system(command_outputting_to_tmp_file.c_str()); //
execute the shell command std::string
ret=OHDFilesystemUtil::read_file(output_filename);
  openhd::log::get_default()->debug("Done result code: {}
text:[{}]",status,ret); OHDFilesystemUtil::remove_if_existing(output_filename);
  return ret;
}*/